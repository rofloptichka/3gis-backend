datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  MANAGER
  DRIVER
}

model VehicleFleet {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  email       String
  phoneNumber String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vehicles Vehicle[]
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Request       Request[]
}

model Request {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
  title       String
  description String
  status      String
  type        String
  urgency     String
  media       Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Vehicle {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  driverId       String?       @db.ObjectId
  licensePlate   String?
  currentMission String?
  locationId     String?       @unique @db.ObjectId
  location       Gps?          @relation(fields: [locationId], references: [id])
  locationTime   DateTime
  maintenance    Json?
  malfunctions   Json?
  errorTime      DateTime      @default(now())
  vehicleType    String?
  obd            Json
  status         String?       @default("active")
  currentRouteId String?       @unique @db.ObjectId
  currentRoute   Routes?       @relation(fields: [currentRouteId], references: [id])
  fleetId        String?       @db.ObjectId
  fleet          VehicleFleet? @relation(fields: [fleetId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Violation      Violation[]
  Counters       Counter[]
}

model Gps {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId String?  @db.ObjectId
  vehicle   Vehicle?
  routeId   String?  @db.ObjectId
  route     Routes?  @relation(fields: [routeId], references: [id])
  latitude  Float
  longitude Float
  altitude  Float?
  speed     Float?
  isKey     Boolean? @default(false)
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Routes {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  driverId       String
  startingLocation Json
  endingLocation Json
  startingTime   DateTime?
  endingTime     DateTime?
  geojson        Json?
  vehicleId      String?   @db.ObjectId
  vehicle        Vehicle?
  gps            Gps[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
}

model Violation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId   String   @db.ObjectId
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
  type        String
  description String?
  context     Json?
  createdAt   DateTime @default(now())
}

model Counter {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId    String  @db.ObjectId
  vehicle      Vehicle @relation(fields: [vehicleId], references: [id])
  title        String
  description  String?
  nextDistance Int
  needDistance Int
}
