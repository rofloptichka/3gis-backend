datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  MANAGER
  DRIVER
}

model VehicleFleet {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  email       String
  phoneNumber String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vehicles Vehicle[]
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Request       Request[]
}

model Request {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
  title       String
  description String
  status      String
  type        String
  urgency     String
  media       Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Vehicle {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  vin            String?
  driverId       String?
  driver         Driver?       @relation(fields: [driverId], references: [id])
  licensePlate   String?
  currentMission String?
  locationId     String?  @unique @db.ObjectId
  location       Gps?     @relation(fields: [locationId], references: [id], onDelete: NoAction, onUpdate: NoAction) // One side defines the relation
  location_time  DateTime
  maintenance    Json?
  malfunctions   Json?
  error_time     DateTime  @default(now())
  vehicleType    String?
  obd            Json
  status         String?   @default("active")
  currentRouteId String?   @unique @db.ObjectId
  currentRoute   Routes?   @relation(fields: [currentRouteId], references: [id])
  fleetId        String?   @db.ObjectId
  fleet          VehicleFleet? @relation(fields: [fleetId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Violation      Violation[]
  Counters       Counter[]
}


model Driver {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  department   String
  experience   String
  dateOfBirth  DateTime @default(now())
  phoneNumber  String
  vehicles     Vehicle[]
}

model Report {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicle_id String?  @db.ObjectId
  driver_id  String?  @db.ObjectId
  job_id     String?
  type       String
  time       DateTime @default(now())
  location   String
  media      String
  status     String
}

model Document {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
}

model Obd {
  id                          String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId                   String?  @db.ObjectId
  engineRpm                   Float?
  vehicleSpeed                Float?
  throttlePosition            Float?
  fuelLevel                   Float?
  shortTrim1                  Float?
  longTrim1                   Float?
  shortTrim2                  Float?
  longTrim2                   Float?
  engineLoad                  Float?
  intakeAirTemperature        Float?
  massAirFlow                 Float?
  fuelPressure                Float?
  fuelConsumptionRate         Float?
  engineCoolantTemperature    Float?
  oxygenSensorReading         Float?
  catalystTemperature         Float?
  evapEmissionControlPressure Float?
  diagnosticTroubleCode       String?
  batteryVoltage              Float?
  oilTemperature              Float?
  distanceTraveled            Float?
  time                        DateTime? @default(now())
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
}

model Gps {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId String?  @unique @db.ObjectId // Ensure `@unique` for one-to-one relation
  vehicle   Vehicle? @relation
  routeId   String?  @db.ObjectId
  route     Routes?  @relation(fields: [routeId], references: [id])
  latitude  Float
  longitude Float
  altitude  Float?
  speed     Float?
  isKey     Boolean? @default(false)
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Routes {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  driver_id        String
  startingLocation Json
  endingLocation   Json
  startingTime     DateTime?
  endingTime       DateTime?
  geojson          Json?
  vehicleId        String?   @db.ObjectId
  vehicle          Vehicle?
  gps              Gps[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
}

model Violation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId   String   @db.ObjectId
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
  type        String
  description String?
  context     Json?
  createdAt   DateTime @default(now())
}

model Counter {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId    String  @db.ObjectId
  vehicle      Vehicle @relation(fields: [vehicleId], references: [id])
  title        String
  description  String?
  currentDistance Int
  needDistance Int
}

model Obd_check {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  all       Json
  createdAt DateTime @default(now())
}

model Obd_fuel {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicle_id            String?  @db.ObjectId
  engineRpm             Int?
  fuelLevel             Int?
  engineLoad            Int?
  massAirFlow           Float?
  fuelPressure          Int?
  fuelConsumptionRate   Float?
  diagnosticTroubleCode String?
  absStatus             Boolean?
  tirePressure          Int?
  distanceTraveled      Float?
  time                  DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model File {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  filename  String
  path      String  // Stores file path (e.g., "/uploads/file.pdf")
  uploadedAt DateTime @default(now())
}
